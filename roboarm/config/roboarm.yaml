joint_state_controller:
  type: joint_state_controller/JointStateController
  publish_rate: 50

arm_controller:
  type: "position_controllers/JointGroupPositionController"
  joints: [arm_shoulder_pan_joint, arm_shoulder_lift_joint, arm_elbow_flex_joint, arm_wrist_flex_joint, gripper_joint]
  #pid: {p: 100.0, i: 0.01, d: 10.0}
  publish_rate: 50

wheel_controller:
  type: "velocity_controllers/JointGroupVelocityController"
  joints: ['front_left_wheel_joint', 'back_left_wheel_joint', 'front_right_wheel_joint', 'back_right_wheel_joint']
  #pid: {p: 100.0, i: 0.01, d: 10.0}
  publish_rate: 50
 
mobile_base_controller:
  type: "diff_drive_controller/DiffDriveController"
  left_wheel: ['front_left_wheel_joint', 'back_left_wheel_joint']
  right_wheel: ['front_right_wheel_joint', 'back_right_wheel_joint']
  publish_rate: 50
  pose_covariance_diagonal: [0.001, 0.001, 1000000.0, 1000000.0, 1000000.0, 0.03]
  twist_covariance_diagonal: [0.001, 0.001, 0.001, 1000000.0, 1000000.0, 0.03]
  cmd_vel_timeout: 0.25

  # Odometry fused with IMU is published by robot_localization, so
  # no need to publish a TF based on encoders alone.
  enable_odom_tf: false

  # Wheel separation and radius multipliers
  wheel_separation_multiplier: 1.0 # default: 1.0
  wheel_radius_multiplier    : 1.0 # default: 1.0

  # Velocity and acceleration limits
  # Whenever a min_* is unspecified, default to -max_*
  linear:
    x:
      has_velocity_limits    : true
      max_velocity           : 2.0   # m/s
      has_acceleration_limits: true
      max_acceleration       : 20.0   # m/s^2
  angular:
    z:
      has_velocity_limits    : true
      max_velocity           : 4.0   # rad/s
      has_acceleration_limits: true
      max_acceleration       : 25.0   # rad/s^2

# gazebo_ros_control:
#   pid_gains:
#     arm_shoulder_pan_joint: {p: 5.0, i: 0.0, d: 0.0}
#     arm_shoulder_lift_joint: {p: 7.0, i: 0.001, d: 0.08}
#     arm_elbow_flex_joint: {p: 3.0, i: 0.001, d: 0.01}
#     arm_wrist_flex_joint: {p: 2.0, i: 0.0, d: 0.0}
#     gripper_joint: {p: 0.2, i: 0.0, d: 0.0}
#     front_left_wheel_joint: {p: 2, i: 0.0, d: 0.0}
#     back_left_wheel_joint: {p: 2, i: 0.0, d: 0.0}
#     front_right_wheel_joint: {p: 2, i: 0.0, d: 0.0}
#     back_right_wheel_joint: {p: 2, i: 0.0, d: 0.0}

#rostopic pub /roboarm/wheel_controller/command std_msgs/Float64MultiArray "data: [0,0,0,0]"
#rostopic pub /roboarm/arm_controller/command std_msgs/Float64MultiArray "data: [0,0,0,0,0]"